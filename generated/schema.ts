// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("feeMethod", Value.fromI32(0));
    this.set("side", Value.fromI32(0));
    this.set("saleKind", Value.fromI32(0));
    this.set("target", Value.fromString(""));
    this.set("howToCall", Value.fromI32(0));
    this.set("invalid", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Order entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get maker(): string | null {
    let value = this.get("maker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set maker(value: string | null) {
    if (!value) {
      this.unset("maker");
    } else {
      this.set("maker", Value.fromString(<string>value));
    }
  }

  get taker(): string | null {
    let value = this.get("taker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set taker(value: string | null) {
    if (!value) {
      this.unset("taker");
    } else {
      this.set("taker", Value.fromString(<string>value));
    }
  }

  get exchangeAddress(): string | null {
    let value = this.get("exchangeAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set exchangeAddress(value: string | null) {
    if (!value) {
      this.unset("exchangeAddress");
    } else {
      this.set("exchangeAddress", Value.fromString(<string>value));
    }
  }

  get takerRelayerFee(): BigInt | null {
    let value = this.get("takerRelayerFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set takerRelayerFee(value: BigInt | null) {
    if (!value) {
      this.unset("takerRelayerFee");
    } else {
      this.set("takerRelayerFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get makerRelayerFee(): BigInt | null {
    let value = this.get("makerRelayerFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set makerRelayerFee(value: BigInt | null) {
    if (!value) {
      this.unset("makerRelayerFee");
    } else {
      this.set("makerRelayerFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get takerProtocolFee(): BigInt | null {
    let value = this.get("takerProtocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set takerProtocolFee(value: BigInt | null) {
    if (!value) {
      this.unset("takerProtocolFee");
    } else {
      this.set("takerProtocolFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get makerProtocolFee(): BigInt | null {
    let value = this.get("makerProtocolFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set makerProtocolFee(value: BigInt | null) {
    if (!value) {
      this.unset("makerProtocolFee");
    } else {
      this.set("makerProtocolFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get feeRecipient(): string | null {
    let value = this.get("feeRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feeRecipient(value: string | null) {
    if (!value) {
      this.unset("feeRecipient");
    } else {
      this.set("feeRecipient", Value.fromString(<string>value));
    }
  }

  get staticTarget(): string | null {
    let value = this.get("staticTarget");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set staticTarget(value: string | null) {
    if (!value) {
      this.unset("staticTarget");
    } else {
      this.set("staticTarget", Value.fromString(<string>value));
    }
  }

  get feeMethod(): i32 {
    let value = this.get("feeMethod");
    return value!.toI32();
  }

  set feeMethod(value: i32) {
    this.set("feeMethod", Value.fromI32(value));
  }

  get side(): i32 {
    let value = this.get("side");
    return value!.toI32();
  }

  set side(value: i32) {
    this.set("side", Value.fromI32(value));
  }

  get saleKind(): i32 {
    let value = this.get("saleKind");
    return value!.toI32();
  }

  set saleKind(value: i32) {
    this.set("saleKind", Value.fromI32(value));
  }

  get target(): string {
    let value = this.get("target");
    return value!.toString();
  }

  set target(value: string) {
    this.set("target", Value.fromString(value));
  }

  get howToCall(): i32 {
    let value = this.get("howToCall");
    return value!.toI32();
  }

  set howToCall(value: i32) {
    this.set("howToCall", Value.fromI32(value));
  }

  get calldata(): Bytes | null {
    let value = this.get("calldata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set calldata(value: Bytes | null) {
    if (!value) {
      this.unset("calldata");
    } else {
      this.set("calldata", Value.fromBytes(<Bytes>value));
    }
  }

  get paymentToken(): string | null {
    let value = this.get("paymentToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set paymentToken(value: string | null) {
    if (!value) {
      this.unset("paymentToken");
    } else {
      this.set("paymentToken", Value.fromString(<string>value));
    }
  }

  get basePrice(): BigInt | null {
    let value = this.get("basePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set basePrice(value: BigInt | null) {
    if (!value) {
      this.unset("basePrice");
    } else {
      this.set("basePrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get extra(): BigInt | null {
    let value = this.get("extra");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set extra(value: BigInt | null) {
    if (!value) {
      this.unset("extra");
    } else {
      this.set("extra", Value.fromBigInt(<BigInt>value));
    }
  }

  get listingTime(): BigInt | null {
    let value = this.get("listingTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set listingTime(value: BigInt | null) {
    if (!value) {
      this.unset("listingTime");
    } else {
      this.set("listingTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get expirationTime(): BigInt | null {
    let value = this.get("expirationTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expirationTime(value: BigInt | null) {
    if (!value) {
      this.unset("expirationTime");
    } else {
      this.set("expirationTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get salt(): BigInt | null {
    let value = this.get("salt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set salt(value: BigInt | null) {
    if (!value) {
      this.unset("salt");
    } else {
      this.set("salt", Value.fromBigInt(<BigInt>value));
    }
  }

  get invalid(): boolean {
    let value = this.get("invalid");
    return value!.toBoolean();
  }

  set invalid(value: boolean) {
    this.set("invalid", Value.fromBoolean(value));
  }

  get parcel(): string | null {
    let value = this.get("parcel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcel(value: string | null) {
    if (!value) {
      this.unset("parcel");
    } else {
      this.set("parcel", Value.fromString(<string>value));
    }
  }

  get date(): BigInt | null {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt | null) {
    if (!value) {
      this.unset("date");
    } else {
      this.set("date", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class PaymentToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("symbol", Value.fromString(""));
    this.set("decimals", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PaymentToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PaymentToken entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PaymentToken", id.toString(), this);
    }
  }

  static load(id: string): PaymentToken | null {
    return changetype<PaymentToken | null>(store.get("PaymentToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get parcels(): Array<string> {
    let value = this.get("parcels");
    return value!.toStringArray();
  }

  set parcels(value: Array<string>) {
    this.set("parcels", Value.fromStringArray(value));
  }

  get makerOrders(): Array<string> {
    let value = this.get("makerOrders");
    return value!.toStringArray();
  }

  set makerOrders(value: Array<string>) {
    this.set("makerOrders", Value.fromStringArray(value));
  }

  get takerOrders(): Array<string> {
    let value = this.get("takerOrders");
    return value!.toStringArray();
  }

  set takerOrders(value: Array<string>) {
    this.set("takerOrders", Value.fromStringArray(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class Parcel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Parcel entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Parcel entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Parcel", id.toString(), this);
    }
  }

  static load(id: string): Parcel | null {
    return changetype<Parcel | null>(store.get("Parcel", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get numTransfers(): BigInt | null {
    let value = this.get("numTransfers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numTransfers(value: BigInt | null) {
    if (!value) {
      this.unset("numTransfers");
    } else {
      this.set("numTransfers", Value.fromBigInt(<BigInt>value));
    }
  }

  get orders(): Array<string> {
    let value = this.get("orders");
    return value!.toStringArray();
  }

  set orders(value: Array<string>) {
    this.set("orders", Value.fromStringArray(value));
  }

  get saleEvents(): Array<string> {
    let value = this.get("saleEvents");
    return value!.toStringArray();
  }

  set saleEvents(value: Array<string>) {
    this.set("saleEvents", Value.fromStringArray(value));
  }

  get transfers(): Array<string> {
    let value = this.get("transfers");
    return value!.toStringArray();
  }

  set transfers(value: Array<string>) {
    this.set("transfers", Value.fromStringArray(value));
  }
}

export class SaleEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("saleKind", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SaleEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SaleEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SaleEvent", id.toString(), this);
    }
  }

  static load(id: string): SaleEvent | null {
    return changetype<SaleEvent | null>(store.get("SaleEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sellOrder(): string | null {
    let value = this.get("sellOrder");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sellOrder(value: string | null) {
    if (!value) {
      this.unset("sellOrder");
    } else {
      this.set("sellOrder", Value.fromString(<string>value));
    }
  }

  get buyOrder(): string | null {
    let value = this.get("buyOrder");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyOrder(value: string | null) {
    if (!value) {
      this.unset("buyOrder");
    } else {
      this.set("buyOrder", Value.fromString(<string>value));
    }
  }

  get maker(): string | null {
    let value = this.get("maker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set maker(value: string | null) {
    if (!value) {
      this.unset("maker");
    } else {
      this.set("maker", Value.fromString(<string>value));
    }
  }

  get taker(): string | null {
    let value = this.get("taker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set taker(value: string | null) {
    if (!value) {
      this.unset("taker");
    } else {
      this.set("taker", Value.fromString(<string>value));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get parcel(): string | null {
    let value = this.get("parcel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcel(value: string | null) {
    if (!value) {
      this.unset("parcel");
    } else {
      this.set("parcel", Value.fromString(<string>value));
    }
  }

  get transfer(): string | null {
    let value = this.get("transfer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transfer(value: string | null) {
    if (!value) {
      this.unset("transfer");
    } else {
      this.set("transfer", Value.fromString(<string>value));
    }
  }

  get date(): BigInt | null {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt | null) {
    if (!value) {
      this.unset("date");
    } else {
      this.set("date", Value.fromBigInt(<BigInt>value));
    }
  }

  get saleKind(): i32 {
    let value = this.get("saleKind");
    return value!.toI32();
  }

  set saleKind(value: i32) {
    this.set("saleKind", Value.fromI32(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("from", Value.fromString(""));
    this.set("to", Value.fromString(""));
    this.set("parcel", Value.fromString(""));
    this.set("transaction", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get saleEvent(): string | null {
    let value = this.get("saleEvent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set saleEvent(value: string | null) {
    if (!value) {
      this.unset("saleEvent");
    } else {
      this.set("saleEvent", Value.fromString(<string>value));
    }
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get parcel(): string {
    let value = this.get("parcel");
    return value!.toString();
  }

  set parcel(value: string) {
    this.set("parcel", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get date(): BigInt | null {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt | null) {
    if (!value) {
      this.unset("date");
    } else {
      this.set("date", Value.fromBigInt(<BigInt>value));
    }
  }

  get nthTradeOfParcel(): BigInt | null {
    let value = this.get("nthTradeOfParcel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nthTradeOfParcel(value: BigInt | null) {
    if (!value) {
      this.unset("nthTradeOfParcel");
    } else {
      this.set("nthTradeOfParcel", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("from", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }
}
